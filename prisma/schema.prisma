// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String   @unique
  expiryDate DateTime
  isActive   Boolean
  user       User     @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId   String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  imageUrl  String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum UserRole {
  ADMIN
  USER
}


model User {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String?              @unique
  password            String?
  emailVerified       Boolean              @default(false)
  sessions            Session[]
  coupons             Coupon[]
  accounts            Account[]
  role                UserRole             @default(USER)
  plan                String?
  verificationToken   String?
  status              Boolean              @default(false)
  profile             UserProfile? // Link to user profile
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  passwordResetTokens PasswordResetToken[]

}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String   @db.ObjectId
  token   String   @unique
  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // @@index([token])

  @@unique([userId, token])
  @@index([userId])
}

model UserProfile {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique @db.ObjectId
  // Personal Details
  name          String?
  firstName     String?
  lastName      String?
  email         String?
  username      String?
  phone         String?
  streetAddress String?
  city          String?
  country       String?
  district      String?
  dateOfBirth   DateTime?
  profileImage  String?
  isOnBoarded   Boolean   @default(false)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

